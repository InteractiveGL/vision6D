name: Build Executables and Create GitHub Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: Build Installers
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: ubuntu-22.04
            arch: x86_64
          - os: windows-latest
            arch: x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install .
          pip install pyinstaller

      - name: Build Executable (Windows/Linux)
        if: matrix.os != 'macos-latest'
        run: |
          pyinstaller --add-data="vision6D/data:vision6D/data" --onefile --name vision6d-${{ runner.os }}-${{ matrix.arch }} --icon="vision6D/data/icons/logo.ico" --noconsole scripts/__main__.py

      - name: Build Executable (macOS ARM64)
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          arch -arm64 python3 -m pip install .
          arch -arm64 python3 -m pip install pyinstaller
          arch -arm64 pyinstaller \
            --add-data="vision6D/data:vision6D/data" \
            --onefile \
            --name vision6d-macOS-arm64 \
            --icon="vision6D/data/icons/logo.icns" \
            --noconsole \
            scripts/__main__.py \
            --hidden-import="vtkmodules.all" \
            --hidden-import="vtkmodules.util.data_model" \
            --hidden-import="vtkmodules.util.execution_model" \
            --hidden-import="vtkmodules.util.numpy_support" \
            --hidden-import="vtkmodules.util.vtkConstants"

      - name: Create macOS Drag-and-Drop DMG (with icon)
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          # Setup directories
          mkdir -p dmg_build_tmp/Vision6D.app/Contents/MacOS
          mkdir -p dmg_build_tmp/Vision6D.app/Contents/Resources

          # Copy executable into proper macOS .app structure
          cp dist/vision6d-macOS-arm64 dmg_build_tmp/Vision6D.app/Contents/MacOS/Vision6D
          chmod +x dmg_build_tmp/Vision6D.app/Contents/MacOS/Vision6D

          # Copy your .icns file
          cp vision6D/data/icons/logo.icns dmg_build_tmp/Vision6D.app/Contents/Resources/logo.icns

          # Create Info.plist with icon definition
          cat <<EOF > dmg_build_tmp/Vision6D.app/Contents/Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
            "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleName</key>
              <string>Vision6D</string>
              <key>CFBundleExecutable</key>
              <string>Vision6D</string>
              <key>CFBundleIconFile</key>
              <string>logo.icns</string>
              <key>CFBundleIdentifier</key>
              <string>com.yourcompany.vision6d</string>
              <key>CFBundleVersion</key>
              <string>${{ github.ref_name }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ github.ref_name }}</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.15</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

          # Link to Applications folder for easy drag-and-drop
          mkdir -p dmg_stage
          cp -R dmg_build_tmp/Vision6D.app dmg_stage/Vision6D.app
          ln -s /Applications dmg_stage/Applications

          # Create .dmg installer
          hdiutil create -volname "Vision6D" \
            -srcfolder dmg_stage \
            -ov -format UDZO vision6d-macos-arm64.dmg

      # Linux .deb package
      - name: Create DEB (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get install -y dpkg fakeroot

          # Define package structure
          mkdir -p vision6d_1.0.0-1_amd64/usr/local/bin
          mkdir -p vision6d_1.0.0-1_amd64/usr/share/applications
          mkdir -p vision6d_1.0.0-1_amd64/usr/share/icons/hicolor/256x256/apps

          # Copy the executable
          cp dist/vision6d-Linux-x86_64 vision6d_1.0.0-1_amd64/usr/local/bin/vision6d
          chmod +x vision6d_1.0.0-1_amd64/usr/local/bin/vision6d

          # Copy your icon (ensure it's PNG format)
          cp vision6D/data/icons/logo.png vision6d_1.0.0-1_amd64/usr/share/icons/hicolor/256x256/apps/vision6d.png

          # Create .desktop file
          cat << EOF > vision6d_1.0.0-1_amd64/usr/share/applications/vision6d.desktop
          [Desktop Entry]
          Name=Vision 6D
          Comment=Vision 6D
          Exec=/usr/local/bin/vision6d
          Icon=vision6d
          Terminal=false
          Type=Application
          Categories=Utility;Graphics;
          EOF

          # Control file (package metadata)
          mkdir vision6d_1.0.0-1_amd64/DEBIAN
          cat << EOF > vision6d_1.0.0-1_amd64/DEBIAN/control
          Package: vision6d
          Version: 1.0.0
          Architecture: amd64
          Maintainer: ykzzyk <n359222435@gmail.com>
          Description: Vision6D application.
          EOF

          # Build the .deb package
          fakeroot dpkg-deb --build vision6d_1.0.0-1_amd64 vision6d-linux.deb

      # Windows .exe installer with NSIS
      - name: Create EXE installer (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install nsis -y
          mkdir installer
          move dist\vision6d-Windows-x86_64.exe installer\vision6d.exe

          @'
          !define APP_NAME "Vision6D"
          !define APP_VERSION "1.0.0"
          !define APP_EXE "vision6d.exe"
          !define APP_ICON "logo.ico"
          !define UNINSTALL_REG_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}"

          OutFile "..\vision6d-windows-installer.exe"
          InstallDir "$PROGRAMFILES\${APP_NAME}"
          RequestExecutionLevel admin

          Page directory
          Page instfiles

          UninstPage uninstConfirm
          UninstPage instfiles

          Section "Install"
            SetOutPath "$INSTDIR"
            File "${APP_EXE}"
            File "${APP_ICON}"

            ; Shortcuts
            CreateShortcut "$DESKTOP\${APP_NAME}.lnk" "$INSTDIR\${APP_EXE}" "" "$INSTDIR\${APP_ICON}" 0
            CreateShortcut "$SMPROGRAMS\${APP_NAME}.lnk" "$INSTDIR\${APP_EXE}" "" "$INSTDIR\${APP_ICON}" 0

            ; Uninstaller
            WriteUninstaller "$INSTDIR\uninstall.exe"

            ; Registry entries for Programs and Features
            WriteRegStr HKLM "${UNINSTALL_REG_KEY}" "DisplayName" "${APP_NAME}"
            WriteRegStr HKLM "${UNINSTALL_REG_KEY}" "DisplayVersion" "${APP_VERSION}"
            WriteRegStr HKLM "${UNINSTALL_REG_KEY}" "Publisher" "Vision6D"
            WriteRegStr HKLM "${UNINSTALL_REG_KEY}" "DisplayIcon" "$INSTDIR\${APP_ICON}"
            WriteRegStr HKLM "${UNINSTALL_REG_KEY}" "UninstallString" "$INSTDIR\uninstall.exe"
            WriteRegDWORD HKLM "${UNINSTALL_REG_KEY}" "NoModify" 1
            WriteRegDWORD HKLM "${UNINSTALL_REG_KEY}" "NoRepair" 1
          SectionEnd

          Section "Uninstall"
            Delete "$INSTDIR\${APP_EXE}"
            Delete "$INSTDIR\${APP_ICON}"
            Delete "$INSTDIR\uninstall.exe"
            Delete "$DESKTOP\${APP_NAME}.lnk"
            Delete "$SMPROGRAMS\${APP_NAME}.lnk"
            RMDir "$INSTDIR"

            ; Remove registry entries
            DeleteRegKey HKLM "${UNINSTALL_REG_KEY}"
          SectionEnd

          '@ | Out-File -Encoding ASCII installer\installer.nsi

          copy vision6D\data\icons\logo.ico installer\
          makensis installer\installer.nsi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vision6d-${{ runner.os }}
          path: |
            *.dmg
            *.deb
            *.exe

  release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare Artifacts
        run: |
          mv ./artifacts/vision6d-macOS/*.dmg ./vision6d-macos.dmg
          mv ./artifacts/vision6d-Linux/*.deb ./vision6d-linux.deb
          mv ./artifacts/vision6d-Windows/*.exe ./vision6d-windows-installer.exe

      - name: Release and Upload
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: |
            vision6d-macos.dmg
            vision6d-linux.deb
            vision6d-windows-installer.exe
