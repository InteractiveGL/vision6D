# git tag x.x.x && git push origin --tags

name: Build Executables and Create GitHub Release

on:
  push:
    tags:
      - "*"

jobs:
  build-executables:
    name: Build Executables with PyInstaller
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: ''
            arch: 'x86_64'
          - os: ubuntu-22.04
            target: ''
            arch: 'x86_64'
          - os: macos-latest
            target: 'x86_64'
            arch: 'x86_64'
          - os: macos-latest
            target: 'arm64'
            arch: 'arm64'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python (Windows)
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install .

      - name: Install PyInstaller
        run: |
          pip install pyinstaller

      - name: Build Executable (Windows)
        run: |
          pyinstaller --add-data="vision6D/data;vision6D/data" --onefile --name vision6d --icon=vision6D/data/icons/vision6d_logo.ico scripts/__main__.py

      - name: Install Inno Setup
        run: |
          choco install innosetup --no-progress

      - name: Create Installer with Inno Setup
        shell: powershell
        run: |
          $issContent = @"
          [Setup]
          AppName=Vision6D
          AppVersion=${{ github.ref_name }}
          DefaultDirName={pf}\Vision6D
          DefaultGroupName=Vision6D
          OutputBaseFilename=vision6d-installer-${{ github.ref_name }}
          Compression=lzma
          SolidCompression=yes
          
          [Files]
          Source: "dist\vision6d.exe"; DestDir: "{app}"; Flags: ignoreversion
          
          [Icons]
          Name: "{group}\Vision6D"; Filename: "{app}\vision6d.exe"
          Name: "{userdesktop}\Vision6D"; Filename: "{app}\vision6d.exe"; Tasks: desktopicon
          
          [Tasks]
          Name: desktopicon; Description: "Create a desktop icon"; GroupDescription: "Additional icons:"
          "@
          Set-Content -Path vision6d-installer.iss -Value $issContent -Encoding UTF8

          ISCC.exe vision6d-installer.iss

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vision6d-windows-installer
          path: Output/vision6d-installer-${{ github.ref_name }}.exe

      - name: Build Executable (Linux)
        if: runner.os == 'Linux'
        run: |
          pyinstaller --add-data="vision6D/data:vision6D/data" --onefile --name vision6d --icon=vision6D/data/icons/vision6d_logo.ico scripts/__main__.py

      - name: Create Linux .deb package
        if: runner.os == 'Linux'
        run: |
          # Create the required folder structure
          mkdir -p deb_package/DEBIAN
          mkdir -p deb_package/usr/local/bin
          mkdir -p deb_package/usr/share/applications
          mkdir -p deb_package/usr/share/icons/hicolor/256x256/apps

          # Copy executable
          cp dist/vision6d deb_package/usr/local/bin/vision6d
          chmod +x deb_package/usr/local/bin/vision6d

          # Create DEBIAN control file
          cat << EOF > deb_package/DEBIAN/control
          Package: vision6d
          Version: ${GITHUB_REF_NAME#v}
          Section: base
          Priority: optional
          Architecture: amd64
          Maintainer: ykzzyk <nz9024295@gmail.com>
          Description: Vision6D Application
          EOF

          # Optional: Create a desktop entry (.desktop file)
          cat << EOF > deb_package/usr/share/applications/vision6d.desktop
          [Desktop Entry]
          Type=Application
          Name=Vision6D
          Exec=/usr/local/bin/vision6d
          Icon=vision6d
          Categories=Utility;
          EOF

          cp vision6D/data/icons/logo.png deb_package/usr/share/icons/hicolor/256x256/apps/vision6d.png

          # Build the .deb package
          dpkg-deb --build deb_package vision6d-${GITHUB_REF_NAME#v}-linux-amd64.deb

      - name: Upload Linux DEB package
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: vision6d-linux-deb
          path: vision6d-${{ github.ref_name }}-linux-amd64.deb



      - name: Install Python Universal2 (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          curl -LO https://www.python.org/ftp/python/3.9.13/python-3.9.13-macos11.pkg
          sudo installer -pkg python-3.9.13-macos11.pkg -target /
          echo "/Library/Frameworks/Python.framework/Versions/3.9/bin" >> $GITHUB_PATH

      - name: Build Executable (macOS ARM64)
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          arch -arm64 python3 -m pip install .
          arch -arm64 python3 -m pip install pyinstaller
          arch -arm64 pyinstaller --add-data="vision6D/data:vision6D/data" --onefile --name vision6d-macOS-arm64 --icon=vision6D/data/icons/vision6d_logo.ico scripts/__main__.py \
            --hidden-import="vtkmodules.all" \
            --hidden-import="vtkmodules.util.data_model" \
            --hidden-import="vtkmodules.util.execution_model" \
            --hidden-import="vtkmodules.util.numpy_support" \
            --hidden-import="vtkmodules.util.vtkConstants"

      - name: Build Executable (macOS Intel x86_64)
        if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
        run: |
          arch -x86_64 python3 -m pip install .
          arch -x86_64 python3 -m pip install pyinstaller
          arch -x86_64 pyinstaller --add-data="vision6D/data:vision6D/data" --onefile --name vision6d-macOS-x86_64 --icon=vision6D/data/icons/vision6d_logo.ico scripts/__main__.py \
            --hidden-import="vtkmodules.all" \
            --hidden-import="vtkmodules.util.data_model" \
            --hidden-import="vtkmodules.util.execution_model" \
            --hidden-import="vtkmodules.util.numpy_support" \
            --hidden-import="vtkmodules.util.vtkConstants"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vision6d-${{ runner.os }}-${{ matrix.arch }}
          path: |
            dist/vision6d-${{ runner.os }}-${{ matrix.arch }}${{ runner.os == 'Windows' && '.exe' || '' }}
            dist/vision6d-macos-${{ matrix.arch }}

  create-release:
    name: Create Draft GitHub Release and Upload Assets
    runs-on: ubuntu-latest
    needs: build-executables
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare Artifacts
        run: |
          mv ./artifacts/vision6d-Windows-x86_64/vision6d-Windows-x86_64.exe ./vision6d-windows.exe
          mv ./artifacts/vision6d-Linux-x86_64/vision6d-Linux-x86_64 ./vision6d-linux
          mv ./artifacts/vision6d-macOS-x86_64/vision6d-macos-x86_64 ./vision6d-macos-intel
          mv ./artifacts/vision6d-macOS-arm64/vision6d-macos-arm64 ./vision6d-macos-silicon
          chmod +x vision6d-linux vision6d-macos-intel vision6d-macos-silicon

      - name: Release and Upload Executables
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: |
            vision6d-windows.exe
            vision6d-linux
            vision6d-macos-intel
            vision6d-macos-silicon
